TestCase subclass: #MyAOMTest	instanceVariableNames: ''	classVariableNames: ''	package: 'Meta-AOM'!!MyAOMTest methodsFor: 'tests' stamp: '6/8/2025 14:41'!testBasic	"comment stating purpose of instance-side method"	"scope: class-variables  &  instance-variables"	| personType person nameAttribute ageAttribute|	personType := EntityType newName: 'Person'.		nameAttribute := AttributeType newName: 'Name' newType: String.	ageAttribute := AttributeType newName: 'Age' newType: Integer. 	personType addAttribute: nameAttribute.	personType addAttribute: ageAttribute.		person := Entity newType: personType.	person setAttribute: 'Name' to: 'Arnaud'.	person setAttribute: 'Age' to: 24. 		Transcript show: (person returnAllAtributes )	! !!MyAOMTest methodsFor: 'tests' stamp: '6/8/2025 14:46'!testXml	"comment stating purpose of instance-side method"	"scope: class-variables  &  instance-variables"	|fileStream xmlDoc childrenentityModel entity entityTypes personA personB car1|	fileStream := FileSystem disk workingDirectory / 'entities.xml'.	xmlDoc := XMLDOMParser parse: fileStream.	childrenentityModel := xmlDoc root elements.		entityTypes := childrenentityModel collect: [ :entityTypeXML|entity := self entityTypeParser: entityTypeXML. ].		personA := Entity newType: (entityTypes first).	personA setAttribute: 'name' to: 'Arnaud'.	personA setAttribute: 'age' to: 24.		personB := Entity newType: (entityTypes first).	personB setAttribute: 'name' to: 'Bavo'.	personB setAttribute: 'age' to: 35.		Transcript show: (personA returnAllAtributes ).	Transcript show: (personB returnAllAtributes ).		car1 := Entity newType: (entityTypes second).	car1 setAttribute: 'serie' to: 'Polestar 2'.	car1 setAttribute: 'carwheels' to: 12.		Transcript show: (car1 returnAllAtributes ).! !!MyAOMTest methodsFor: 'tests' stamp: '6/8/2025 16:28'!testBehavior	| fileStream xmlDoc childrenentityModel entity entityTypes person|	fileStream := FileSystem disk workingDirectory / 'entities.xml'.	xmlDoc := XMLDOMParser parse: fileStream.	childrenentityModel := xmlDoc root elements.		entityTypes := childrenentityModel collect: [ :entityTypeXML|entity := self entityTypeParser: entityTypeXML. ].		person := Entity newType: entityTypes first.	person setAttribute: 'name' to: 'Arnaud'.	person setAttribute: 'age' to: 35.	person runBehavior: 'AgeBehavior'.! !!MyAOMTest methodsFor: 'as yet unclassified' stamp: '6/5/2025 16:15'!attributeParser: anXmlElement	|attribute|	attribute := AttributeType newName: (anXmlElement attributeAt: 'name') newType: (anXmlElement attributeAt: 'type').	^attribute ! !!MyAOMTest methodsFor: 'as yet unclassified' stamp: '6/8/2025 16:41'!entityTypeParser: anXmlElement	|entityType attribute behaviors|	entityType := EntityType newName: (anXmlElement attributeAt: 'name').		(anXmlElement elementAt: 'attributes') elements do: [:attributeXML|attribute := self attributeParser: attributeXML. entityType addAttribute: attribute.].	(anXmlElement elementAt: 'behaviors') elements do: [ :behaviorXML|entityType addBehavior: (behaviorXML attributeAt: 'statement') at: (behaviorXML attributeAt: 'name').].		^ entityType ! !Object subclass: #Entity	instanceVariableNames: 'type values'	classVariableNames: ''	package: 'Meta-AOM'!!Entity methodsFor: 'accessing' stamp: '6/4/2025 13:49'!type	^ type! !!Entity methodsFor: 'accessing' stamp: '6/4/2025 13:49'!type: anObject	type := anObject! !!Entity methodsFor: 'accessing' stamp: '6/4/2025 13:49'!values	^ values! !!Entity methodsFor: 'accessing' stamp: '6/4/2025 13:49'!values: anObject	values := anObject! !!Entity methodsFor: 'initialization' stamp: '6/8/2025 14:41'!setAttribute: aName to: aValue	"comment stating purpose of instance-side method"	"scope: class-variables  &  instance-variables"	(self values includesKey: aName )    ifTrue: [ self values at: aName put: aValue ]    ifFalse: [ self error: 'Attribute does not exist' ].! !!Entity methodsFor: 'as yet unclassified' stamp: '6/4/2025 14:05'!getAttribute: aName	"comment stating purpose of instance-side method"	"scope: class-variables  &  instance-variables"	^ self values at: aName ! !!Entity methodsFor: 'as yet unclassified' stamp: '6/4/2025 18:39'!returnAllAtributes	"comment stating purpose of instance-side method"	"scope: class-variables  &  instance-variables"	| stream |stream := String new writeStream.stream    nextPutAll: 'Entity of type: ';    nextPutAll: self type entityName;    nextPutAll: String cr.(values associationsDo: [:assoc |    stream        nextPutAll: assoc key;        nextPutAll: ': ';        nextPutAll: assoc value asString;        nextPutAll: ', ']).        "Remove trailing comma and space, if any values were added"values isEmpty ifFalse: [    stream skip: -2].stream nextPutAll: String cr.^ stream contents! !!Entity methodsFor: 'as yet unclassified' stamp: '6/8/2025 16:08'!runBehavior: aName	type runBehavior: aName on: self! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Entity class	instanceVariableNames: ''!!Entity class methodsFor: 'instance creation' stamp: '6/8/2025 16:14'!newType: aType	|entity|	entity := self new.	entity type: aType.	entity values: Dictionary new.	aType attributes do: [ :atr |entity values at: atr attributeName put: nil. ].	^entity ! !Object subclass: #AttributeType	instanceVariableNames: 'attributeName type'	classVariableNames: ''	package: 'Meta-AOM'!!AttributeType methodsFor: 'accessing' stamp: '6/4/2025 13:49'!attributeName	^ attributeName! !!AttributeType methodsFor: 'accessing' stamp: '6/4/2025 13:49'!attributeName: anObject	attributeName := anObject! !!AttributeType methodsFor: 'accessing' stamp: '6/4/2025 13:49'!type	^ type! !!AttributeType methodsFor: 'accessing' stamp: '6/4/2025 13:49'!type: anObject	type := anObject! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!AttributeType class	instanceVariableNames: ''!!AttributeType class methodsFor: 'instance creation' stamp: '6/5/2025 15:36'!newName: aName newType: aType	| attribute |	attribute := self new.	attribute attributeName: aName.	attribute type: aType.	^attribute ! !Object subclass: #EntityType	instanceVariableNames: 'entityName attributes behaviors'	classVariableNames: ''	package: 'Meta-AOM'!!EntityType methodsFor: 'accessing' stamp: '6/4/2025 13:49'!entityName	^ entityName! !!EntityType methodsFor: 'accessing' stamp: '6/4/2025 13:49'!entityName: anObject	entityName := anObject! !!EntityType methodsFor: 'accessing' stamp: '6/4/2025 13:49'!attributes	^ attributes! !!EntityType methodsFor: 'accessing' stamp: '6/4/2025 13:49'!attributes: anObject	attributes := anObject! !!EntityType methodsFor: 'accessing' stamp: '6/8/2025 14:56'!behaviors	^ behaviors! !!EntityType methodsFor: 'accessing' stamp: '6/8/2025 14:56'!behaviors: anObject	behaviors := anObject! !!EntityType methodsFor: 'adding' stamp: '6/4/2025 14:00'!addAttribute: anAttribute	"comment stating purpose of instance-side method"	"scope: class-variables  &  instance-variables"	self attributes add: anAttribute ! !!EntityType methodsFor: 'adding' stamp: '6/8/2025 14:58'!addBehavior: aBehavior at: aName	self behaviors at: aName put: aBehavior! !!EntityType methodsFor: 'as yet unclassified' stamp: '6/8/2025 16:44'!runBehavior: aName on: anEntity	|beh|	beh := behaviors at: aName ifAbsent: [        self error: 'behavior does not exist'    ].    (Smalltalk compiler evaluate: beh) value: anEntity! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!EntityType class	instanceVariableNames: ''!!EntityType class methodsFor: 'instance creation' stamp: '6/8/2025 14:56'!newName: aName 	| entityType |	entityType := self new.	entityType entityName: aName.	entityType attributes: OrderedCollection new.	entityType behaviors: Dictionary new.	^entityType ! !